#include "CGame.h"
#include "CApplication.h"
#include "CBlock.h"
#include "CBlock2.h"
#include "CPlayer2.h"
#include "CEnemy.h"
#include "CEnemy2.h"
#include "CPoint.h"
#include "CCamera.h"
#include "main.h"
#include "CDOKAN.h"
#include "CTrap.h"
#include "CWall.h"
#include "CGoal.h"
#include "CFallBlock.h"
#include "CTransparentBlock.h"
#include "CNclimbBlock.h"
#include "CBlackBlock.h"
#include "CSky.h"

CGame::CGame()
	: mpUi(nullptr)
	, mTime(0)
	, mCdx(0)
	, mCdy(0)
	, mpPlayer(0)
{
	mpUi = new CUi();  //UIクラスのインスタンスの生成
	//テクスチャの入力
	CApplication::Texture()->Load(TEXTURE);
	//定数の定義
	const int ROWS = 23; //行数
	const int COLS =162; //列数
	//2次元配列のマップ
	int map[ROWS][COLS] =
	{
	{7,7,7,7,7,7, 7,7,7,7, 7,7, 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 7,7,7,7, 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 7, 7,7,7,7,7, 7,7,7,7,7, 7,7,7,7,7,7,7,7,7,7,7,7,7,7, 7,7,7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,7,7, 7,7,7, 7,7, 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12, 0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,12,0,0,0,0, 0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0, 0,12, 0, 0, 0, 0,12, 0, 0,12, 0,0,0,12,0,0, 0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 0, 0,0,0,0, 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1, 0,0,9,0,0, 0,0,0,9,0, 0,1,1,1,1,1,1,1,1,1,1,1,1,1, 0,0,0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1,1,1, 1,1,0, 0,0, 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,11,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0,11,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 2,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,3,0,0,0,0,4,0,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,3,0,3,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,6,6, 6,0,0,13, 6, 6, 0, 0, 0, 0, 0, 0,14, 0,0,0,13,0,0,14,0, 6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,6, 6,0,0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 5, 0,0,0, 0,0,0, 0,0, 0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,10,0,0,0, 0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,10, 0,0,0,0,0, 0,0,0,0,0, 0,6,0,0,6,0,0,6,0,0,0,0,0,0, 6,0,0, 0, 6, 0,10,10,10,10,10,10, 0, 0,0,0, 0,0,0, 0,0, 0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,6,6,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6, 6, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,6,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0,10, 0, 0, 0, 0, 0, 0, 0,10,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 3, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,10,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0, 0,0,0, 0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{7,7,7,7,7,7, 7,7,7,7, 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 7, 7,7,7,7, 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 7, 7,7,7,7,7, 7,7,7,7,7, 7,7,7,7,7,7,7,7,7,7,7,7,7,7, 7,7,7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,7,7, 7,7,7, 7,7, 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
	};
	//マップの制作

	for (int row = 0; row < ROWS; row++)
	{ 
		// 行数分繰り返し
		for (int col = 0; col < COLS; col++)
		{
			//1の時、ブロック生成
			if (map[row][col] == 1)
			{
				//ブロックを生成して、キャラクタマネージャに追加
				CApplication::CharacterManager()->Add(
					new CBlock(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//2の時、プレイヤー生成
			if (map[row][col] == 2)
			{
				//カメラ用差分
				mCdx = WINDOW_WIDTH / 2 - (TIPSIZE + TIPSIZE * 2 * col);
				mCdy = WINDOW_HEIGHT / 2 - (TIPSIZE + TIPSIZE * 2 * row);
				//プレイヤーを生成して、キャラクターマネージャに追加
				CApplication::CharacterManager()->Add(
					//mpPlayerにプレイヤーのインスタンスのポインタを代入
					mpPlayer =
					new CPlayer2(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//3の時、敵を生成
			if (map[row][col] == 3)
			{
				CApplication::CharacterManager()->Add(
					new CEnemy2(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//4の時、折り返しポイント作成
			if (map[row][col] == 4)
			{
				//折り返しポイントを作成して、キャラクタマネジャージャに追加
				CApplication::CharacterManager()->Add(
					new CPoint(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CCharacter::ETag::ETURN));
			}
			//5の時,土管を生成
			if (map[row][col] == 5)
			{
				//ブロックを生成して、キャラクタマネージャに追加
				CApplication::CharacterManager()->Add(
					new CDOKAN(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//6の時、ブロック生成
			if (map[row][col] == 6)
			{
				//ブロックを生成して、キャラクタマネージャに追加
				CApplication::CharacterManager()->Add(
					new CBlock2(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//7の時、死亡判定生成
			if (map[row][col] == 7)
			{
				//死亡判定を生成して、キャラクタマネージャに追加
				CApplication::CharacterManager()->Add(
					new CWall(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//8の時、ゴール生成
			if (map[row][col] == 8)
			{
				//ゴールを生成して、キャラクタマネージャに追加
				CApplication::CharacterManager()->Add(
					new CGoal(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//9の時、トラップ生成
			if (map[row][col] == 9)
			{
				//トラップを生成して、キャラクタマネージャに追加
				CApplication::CharacterManager()->Add(
					new CFallBlock(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//10の時、トラップ生成
			if (map[row][col] == 10)
			{
				//トラップを生成して、キャラクタマネージャに追加
				CApplication::CharacterManager()->Add(
					new CTrap(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//11の時、透明ブロック生成
			if (map[row][col] == 11)
			{
				//を生成し透明ブロックを生成して、キャラクタマネージャに追加
				CApplication::CharacterManager()->Add(
					new CTransparentBlock(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//12の時、登れないブロックを生成して、キャラクタマネージャに追加
			if (map[row][col] == 12)
			{
				CApplication::CharacterManager()->Add(
					new CNclimbBlock(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//13の時、敵を生成して、キャラクタマネージャに追加
			if (map[row][col] == 13)
			{
				CApplication::CharacterManager()->Add(
					new CEnemy(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//14の時、折り返しポイントを生成して、キャラクタマネージャに追加
			if (map[row][col] == 14)
			{
				CApplication::CharacterManager()->Add(
					new CPoint(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CCharacter::ETag::ETURN));
			}
			//15の時、黒背景を追加して、キャラクタマネージャに追加
			if (map[row][col] == 15)
			{
				CApplication::CharacterManager()->Add(
					new CBlackBlock(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
			//16の時、黒背景を追加して、キャラクタマネージャに追加
			if (map[row][col] == 16)
			{
				CApplication::CharacterManager()->Add(
					new CSky(
						TIPSIZE + TIPSIZE * 2 * col,
						TIPSIZE + TIPSIZE * 2 * row,
						TIPSIZE, TIPSIZE,
						CApplication::Texture()));
			}
		}
	} 
}

void CGame::Update()
{
	//更新、衝突、削除、描画
	CApplication::CharacterManager()->Update();
	CApplication::CharacterManager()->Collision();
	CApplication::CharacterManager()->Delete();
	CameraSet();
	CApplication::CharacterManager()->Render();
	CCamera::End();
	//UI
	mpUi->Hp(CPlayer2::Hp());
	mpUi->Time(mTime++);
	mpUi->Render();
}

void CGame::Start()
{
	CameraSet2();
	//ゲームの描画
	CApplication::CharacterManager()->Render();
	//UI処理
	mpUi->Hp(CPlayer2::Hp());
	mpUi->Render();
	mpUi->Start();
}

bool CGame::IsClear()
{  //敵の数が0以下か判定結果を戻す
	return CPlayer2::Goal() <= 0;
}

void CGame::Clear()
{
	CameraSet();
	//ゲームの描画
	CApplication::CharacterManager()->Render();
	CCamera::End();
	//UI処理
	mpUi->Hp(CPlayer2::Hp());
	mpUi->Render();
	mpUi->Clear();
}

bool CGame::IsOver()
{  //HPが0以下か判定結果を戻す
	return CPlayer2::Hp() <= 0;
}

void CGame::Over()
{
	CameraSet();
	//ゲームの描画
	CApplication::CharacterManager()->Render();
	CCamera::End();
	//UI処理
	mpUi->Hp(CPlayer2::Hp());
	mpUi->Render();
	mpUi->Over();
}

CGame::~CGame()
{
	//すべてのインスタンス削除
	CApplication::CharacterManager()->AllDelete();
	//UIを生成している時
	if (mpUi != nullptr)
	{  //UIを削除し、初期化
		delete mpUi;
		mpUi = nullptr;
	}
}

void CGame::CameraSet()
{
	float x = mpPlayer->X() - mCdx;
	//float y = mpPlayer->Y() - mCdy;
	float y = mCdy + 540;
	CCamera::Start(x - WINDOW_WIDTH / 1.2
		, x + WINDOW_WIDTH / 1.2
		, y - WINDOW_HEIGHT / 2
		, y + WINDOW_HEIGHT / 1.2);
}

void CGame::CameraSet2()
{
	float x = mpPlayer->X();
	float y = mCdy + 540;
	CCamera::Start(x - WINDOW_WIDTH / 2
		, x + WINDOW_WIDTH / 2
		, y - WINDOW_HEIGHT / 2
		, y + WINDOW_HEIGHT / 2);
}
